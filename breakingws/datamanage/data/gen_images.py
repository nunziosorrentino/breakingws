# -*- coding: utf-8 -*-
"""Imma_CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KR7eR_-quvu9T1rJhbyUErBZWQfhnZAa

## The idea is to breafly create an cnn here with th euse of colab and test
it with other semples, maybe same features generated like circles or something else?

# CNN for studing glitches presented in O1 and O2 in H1 and L1
"""

import numpy as np

"""## Try to create basical image (circles, ellipses, rectangles, lines)"""

import os
import cv2

imgs_shape = (600, 800, 3)
# Generate random colors for all king of figures
def randomColor():
    return (int(np.random.rand()*128+128),
            int(np.random.rand()*128+128),int(np.random.rand()*128+128))

# Generate circles
def drawCircle(c,x,y,r):
    img = np.zeros(imgs_shape, np.uint8)
    cv2.circle(img,(x,y),r,c, -1)
    return img

def genCircle():
    im = drawCircle(randomColor(),int(np.random.uniform(300, 500)),
                    int(np.random.uniform(200, 400)), 
                    int(np.random.uniform(100, 300)))
    return im

# Generate ellispe
# temploraly with fixed angle=0
def drawEllipse(c,x,y,a,b):
    img = np.zeros(imgs_shape, np.uint8)
    cv2.ellipse(img,(x,y),(a,b), 0, 0, 360, c, -1)
    return img

def genEllipse():
    im = drawEllipse(randomColor(),int(np.random.uniform(300, 500)),
                     int(np.random.uniform(200, 400)),
                     int(np.random.uniform(200, 400)), 
                     int(np.random.uniform(100, 200)))
    return im

# Generate rectangle
def drawRectangle(c,x,y,w,h):
    img = np.zeros(imgs_shape, np.uint8)
    cv2.rectangle(img,(x,y),((x+w),(y+h)), c, -1)
    return img

def genRectangle():
    im = drawRectangle(randomColor(),int(np.random.uniform(300, 500)),
                       int(np.random.uniform(200, 400)),
                       int(np.random.uniform(100, 400)), 
                       int(np.random.uniform(100, 400)))
    return im

# Generate lines
def drawLine(c,x,y,w,h):
    img = np.zeros(imgs_shape, np.uint8)
    cv2.line(img,(x,y),((x+w),(y+h)), c, 9)
    return img

def genLine():
    im = drawLine(randomColor(),
                  int(np.random.uniform(300, 500)),
                  int(np.random.uniform(200, 400)),
                  int(np.random.uniform(100, 400)), 
                  int(np.random.uniform(100, 400)))
    return im

#usefull calss for labels
def class_array(i):
    array_ = np.zeros(4)
    array_[i] = 1
    return array_

def single_lab_data(n_s):
    #now generate all data possible
    circs = np.stack([genCircle() for x in range(n_s)])
    ellips = np.stack([genEllipse() for x in range(n_s)]) 
    rects = np.stack([genRectangle() for x in range(n_s)])
    lines = np.stack([genLine() for x in range(n_s)])
    #and related labels
    c_labels = np.tile(class_array(0), (circs.shape[0], 1))
    e_labels = np.tile(class_array(1), (ellips.shape[0], 1))
    r_labels = np.tile(class_array(2), (rects.shape[0], 1))
    l_labels = np.tile(class_array(3), (lines.shape[0], 1))          
    
    return circs, ellips, rects, lines, c_labels, e_labels, r_labels, l_labels

"""## Now we create the labels for each category and randompy mix images in order to make the right training, test and validation sets"""

#usefull function for data random permutation
def permutation(n_data):
    return(np.random.permutation(n_data))
# generate data

def create_images(nsamples, random=True):
    print('Generating {} images!'.format(nsamples))
    circs, ellips, rects, lines, c_labels, e_labels, r_labels, l_labels = single_lab_data(nsamples)
    # Now data are splitted into three different sets
    l_ = np.concatenate((c_labels, e_labels, r_labels, l_labels))
    ###
    d_ = np.concatenate((circs, ellips, rects, lines))
    #random mix
    if random:
        permutation1 = permutation(d_.shape[0])
        l_ = l_[permutation(permutation1)]
        d_ = d_[permutation(permutation1)]
        
    return np.array(d_), np.array(l_)

if __name__ == '__main__':
    save = True
    nsamples = 200
    data, labels = create_images(nsamples, random=False)
    print(data.shape)
    print(labels.shape)
    #cv2.imshow('image', data[8])
    #cv2.waitKey(0)  
  
    #closing all open windows  
    #cv2.destroyAllWindows()  
    
    if save:
        status = True
        for i in range(nsamples):
            s = cv2.imwrite(os.path.join('circles/crcs{}.png'.format(i)), 
                                 data[i])
            status = bool(s*status)
            s = cv2.imwrite(os.path.join('ellipses/elps{}.png'.format(i)), 
                                 data[i+nsamples])
            status = bool(s*status)
            s = cv2.imwrite(os.path.join('rectangles/rect{}.png'.format(i)), 
                                 data[i+2*nsamples])
            status = bool(s*status)
            s = cv2.imwrite(os.path.join('lines/line{}.png'.format(i)), 
                                 data[1+3*nsamples])
            status = bool(s*status)
        print('Did you save the images?', status)
                     
     
                     
    





